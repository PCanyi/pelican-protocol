package pelicantun

import (
	"fmt"
	"strings"
	"testing"

	cv "github.com/glycerine/goconvey/convey"
)

func TestGenPelicanKey021(t *testing.T) {

	cv.Convey("Pelican keys generated by GenPelicanKey() should verify with IsLegitPelicanKey(), and random bytes should not", t, func() {

		k := GenPelicanKey()
		k2 := GenPelicanKey()

		r1 := RandBytes(149)
		r2 := RandBytes(149)

		cv.So(IsLegitPelicanKey(k), cv.ShouldEqual, true)
		cv.So(IsLegitPelicanKey(k2), cv.ShouldEqual, true)

		cv.So(IsLegitPelicanKey(r1), cv.ShouldEqual, false)
		cv.So(IsLegitPelicanKey(r2), cv.ShouldEqual, false)

		// test for the short key problem

		cv.So(IsLegitPelicanKey(test_gen_short_pelicanKey(1)), cv.ShouldEqual, true)
		cv.So(IsLegitPelicanKey(test_gen_short_pelicanKey(2)), cv.ShouldEqual, true)
		cv.So(IsLegitPelicanKey(test_gen_short_pelicanKey(3)), cv.ShouldEqual, true)
		cv.So(IsLegitPelicanKey(test_gen_short_pelicanKey(5)), cv.ShouldEqual, true)
		cv.So(IsLegitPelicanKey(test_gen_short_pelicanKey(15)), cv.ShouldEqual, true)

	})
}

func test_gen_short_pelicanKey(shortenby int) []byte {

	key := RandBytes(2 * randByteCount)
	for i := 0; i < shortenby; i++ {
		key[i] = 0 // shorten
	}

	hmac := Sha256HMAC(key[:randByteCount], key[randByteCount:2*randByteCount])

	if len(hmac) != 32 {
		panic(fmt.Sprintf("expect Sha256HMAC() to return 32 bytes, but got %d instead.", len(hmac)))
	}

	//fmt.Printf("in GenPelicanKey, hmac = '%x' with len: %d\n", hmac, len(hmac))

	signed_key := make([]byte, len(key)+len(hmac))
	//fmt.Printf("\n\n GenPelicanKey, signed_key is len %d\n", len(signed_key))
	copy(signed_key, key)
	copy(signed_key[2*randByteCount:], hmac)

	//fmt.Printf("before alpha, signed_key = '%x'\n", signed_key)

	alpha_signed_key := EncodeBytesBase36(signed_key)

	sz := len(alpha_signed_key)
	if sz > KeyLen {
		panic(fmt.Sprintf("key too long: %d but expected", sz, KeyLen))
	}
	if sz < KeyLen {
		// prepend with zeros
		//po("\n\n key *was* too short: %d but expected %d. key: '%s'\n\n", sz, KeyLen, string(alpha_signed_key))

		alpha_signed_key = append([]byte(strings.Repeat("0", KeyLen-sz)), alpha_signed_key...)

		//po("\n\n key after pre-pending: '%s'\n\n", string(alpha_signed_key))
	}

	if !IsLegitPelicanKey(alpha_signed_key) {
		panic("alpha_signed_key not passing the IsLegitPelicanKey() test")
	}

	//fmt.Printf("\n\n GenPelicanKey, alpha_signed_key is len %d\n", len(alpha_signed_key))
	return alpha_signed_key

}
